---
// Stats component with countdown animation
---

<div class="stats-container">
  <div class="stats-header">
    <div class="logo">
      <img src="medialogo.png" alt="">
    </div>
  </div>
  
  <div class="stats-grid">
    <div class="stat-item">
      <div class="stat-number-container">
        <div class="stat-number" data-target="40">0</div>
        <div class="stat-suffix">+</div>
      </div>
      <div class="stat-label">Trusted in over 40 countries</div>
    </div>
    
    <div class="stat-item">
      <div class="stat-number-container">
        <div class="stat-number" data-target="12">0</div>
        <div class="stat-suffix">million</div>
      </div>
      <div class="stat-label">Serving users across the globe</div>
    </div>
    
    <div class="stat-item">
      <div class="stat-number-container">
        <div class="stat-number" data-target="60">0</div>
      </div>
      <div class="stat-label">Operators</div>
    </div>
    
    <div class="stat-item">
      <div class="stat-number-container">
        <div class="stat-number" data-target="300">0</div>
      </div>
      <div class="stat-label">Active partnerships</div>
    </div>
  </div>
</div>

<style>
  .stats-container {
    padding: 60px 40px;
    text-align: center;
    font-family: "Manrope", sans-serif;
    max-width: 84rem;
    margin: 0 auto;
  }
  
  .stats-header {
    margin-bottom: 50px;
  }
  
  .logo {
    font-size: 24px;
    font-weight: 600;
    letter-spacing: -0.5px;
  }
  
  .logo img{
    width: 20rem;
  }
  .logo-dot {
    color: #6b7280;
    margin: 0 4px;
  }
  
  .stats-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    align-items: start;
  }
  
  .stat-item {
    display: flex;
    flex-wrap: nowrap;
    flex-direction: column;
    align-items: center;
    text-align: center;
    transition: all 0.3s ease;
    padding: 20px;
    border-radius: 12px;
  }

  .stat-item:hover {
    transform: translateY(-8px) scale(1.05);
  }
  
  .stat-number-container {
    display: flex;
    align-items: baseline;
    justify-content: center;
    margin-bottom: 8px;
    min-height: 72px;
  }
  
  .stat-number {
    font-size: 72px;
    font-weight: 800;
    color: #1f2937;
    line-height: 1;
    display: inline-block;
    transition: all 0.3s ease;
  }

  .stat-item:hover .stat-number {
    color: #6366f1;
    text-shadow: 0 4px 8px rgba(99, 102, 241, 0.3);
  }
  
  .stat-suffix {
    font-size: 72px;
    font-weight: 800;
    color: #1f2937;
    line-height: 1;
    margin-left: 8px;
    display: inline-block;
    transition: all 0.3s ease;
  }

  .stat-item:hover .stat-suffix {
    color: #8b5cf6;
  }
  
  .stat-label {
    font-size: .8rem;
    color: #4c5058;
    font-weight: 400;
    line-height: 1.4;
    max-width: 200px;
    transition: all 0.3s ease;
  }

  .stat-item:hover .stat-label {
    color: #374151;
    font-weight: 600;
  }
  
  /* Responsive design */
  @media (max-width: 1024px) {
    .stats-container {
      padding: 50px 30px;
    }
    
    .stats-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 40px;
    }
    
    .stat-number-container {
      min-height: 56px;
    }
    
    .stat-number, .stat-suffix {
      font-size: 56px;
    }
    
    .stat-label {
      font-size: 0.75rem;
    }
  }
  
  @media (max-width: 768px) {
    .stats-container {
      padding: 40px 20px;
    }
    
    .stats-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 35px;
    }
    
    .stat-number-container {
      min-height: 52px;
    }
    
    .stat-number, .stat-suffix {
      font-size: 52px;
    }
    
    .stat-label {
      font-size: 0.7rem;
      max-width: 180px;
    }
    
    .logo {
      font-size: 18px;
    }
  }
  
  @media (max-width: 640px) {
    .stats-container {
      padding: 35px 15px;
    }
    
    .stats-grid {
      grid-template-columns: 1fr;
      gap: 30px;
    }
    
    .stat-number-container {
      min-height: 48px;
    }
    
    .stat-number, .stat-suffix {
      font-size: 48px;
    }
    
    .stat-label {
      font-size: 0.75rem;
      max-width: 250px;
    }
    
    .logo {
      font-size: 16px;
    }
  }
  
  @media (max-width: 480px) {
    .stats-container {
      padding: 30px 10px;
    }
    
    .stats-grid {
      gap: 25px;
    }
    
    .stat-number-container {
      min-height: 42px;
    }
    
    .stat-number, .stat-suffix {
      font-size: 42px;
    }
    
    .stat-label {
      font-size: 0.7rem;
      max-width: 200px;
    }
    
    .logo {
      font-size: 14px;
    }
  }
  
  @media (max-width: 320px) {
    .stats-container {
      padding: 25px 8px;
    }
    
    .stat-number-container {
      min-height: 36px;
    }
    
    .stat-number, .stat-suffix {
      font-size: 36px;
    }
    
    .stat-label {
      font-size: 0.65rem;
      max-width: 180px;
    }
    
    .logo {
      font-size: 12px;
    }
  }
</style>

<script>
  // Smooth animated counter function
  function animateCounter(element: HTMLElement, target: number, duration: number = 2500) {
    const start = 0;
    const startTime = performance.now();
    
    function easeOut(t: number): number {
      return 1 - Math.pow(1 - t, 3);
    }
    
    function updateCounter(currentTime: number) {
      const elapsed = currentTime - startTime;
      const progress = Math.min(elapsed / duration, 1);
      const easeOut = 1 - Math.pow(1 - progress, 3);
      
      const current = Math.floor(start + (target - start) * easeOut);
      
      element.textContent = current.toString();
      
      if (progress < 1) {
        requestAnimationFrame(updateCounter);
      } else {
        element.textContent = target.toString();
      }
    }
    
    requestAnimationFrame(updateCounter);
  }
  
  // Intersection Observer to trigger animations when component is visible
  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        const statNumbers = entry.target.querySelectorAll('.stat-number');
        
        statNumbers.forEach((element, index) => {
          const target = parseInt((element as HTMLElement).dataset.target || '0');
          
          // Stagger the animations
          setTimeout(() => {
            animateCounter(element as HTMLElement, target);
          }, index * 200);
        });
        
        // Unobserve after animation starts
        observer.unobserve(entry.target);
      }
    });
  }, {
    threshold: 0.5
  });
  
  // Start observing when the component is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const statsContainer = document.querySelector('.stats-container');
    if (statsContainer) {
      observer.observe(statsContainer);
    }
  });
</script>